Create Blog and Admin Panel #1
------------------------------
Paste index design to welcome page
Remove existing CSS and JS to public directory and make 2 dir admin and user.
Put all front design file to public/user 

Blade Templates and Routes #2
-----------------------------
Make home.blade.php and extends to app.blade.php
Create post.blade.php and extends to app.blade.php
Make route for post

Table Structure and Migration #4
--------------------------------
Make table structure 
Make migration file with model
Make directory app/Model
Inside model make 2 directories Admin and User
Separate model through there use

Admin Side Templates #5
-----------------------
Make admin balde and mastering template

Create Post, Tag & Category Forms #6
------------------------------------
Create post route
Create post.blade.php
Create category.blade.php
Create tag.blade.php

Why we need controller #7
-------------------------
Create PostController.php
Create TagController.php
Create CategoryController.php
Create HomeController.php
Make group and resource route for both user and admin
Make post.blade.php resources/views/admin/post

Eloquent Query to Save Data #8
------------------------------
Save data using model

Save Category and Tags to DB #9
-------------------------------
Save tag and category to DB
Make message blade for showing error message
Save and create Tag and category
Make data table showing info(Post, tag, category)

CRUD for Category and Tags #10
------------------------------
Update and delete (Category, Post, Tag)

Many to Many Relationsip #11
----------------------------
Make relationship among category, post and tag using
pivote table

Save data with eloquent relationship #12
----------------------------------------
Change post edit and add new blade (add tag and category option)
Publish and unpublish post.

Add CKeditor #13
-----------------

Show Posts on FrontEnd #14
--------------------------
Show all post from client page
Display separate post.

Pagination #15
--------------

Add Facebook comments system #16
--------------------------------
Search google (facebook comment plugins)
Goto Comments Plugin Code Generator section
	* in url give (https://localhost:8000)

Set number of posts whcih we want to show
Above settings click on Get code button
Before that we've create a facebook app

Add syntax highliter #17
------------------------
Goto http://prismjs.com/
Select OKAIDIA
Select all language and plugins
Download both CSS and JS file
To add prism with ckeditor goto ckeditor builder
Download ckeditor plugins

 Create User Login(Auth) system #20
 ----------------------------------
 php artisan make:auth
 To give login route in our index page
 	goto web.php
 	Goto to Auth.php
 	Goto Router.php(laravel/framework/src/Illuminate/Routing/Router.php)
 	In this file search(auth())
 	Put that login route in our page
 	Change login.blade.php view

 	Add registration page view route to our page
 	Open registration.blade.php from auth

 Create Admin Login(Auth) system #21
 -----------------------------------
Make file in admin directory (login.blade.php)
Goto laravel/framework/src/Illuminate/Routing/Router.php
Copy showLoginFrom route and paste it into admin route group
Copy Auth folder from Http/app Auth  and paste to Admin controller directory
Open AuthenticatesUsers.php
Copy function showLoginForm and paste AdminLoginController
Change view path
Again goto laravel/framework/src/Illuminate/Routing/Router.php
Copy login controller for post
Copy login from AuthenticatesUsers.php and customize that and make like
**********************************
public function login(Request $request)
    {
        $this->validateLogin($request);

        if ($this->attemptLogin($request)) {
            return $this->sendLoginResponse($request);
        }
        return $this->sendFailedLoginResponse($request);
    }
    ***********************************************

 Admin Login(Auth) Create Guard #22
 ----------------------------------
 Open LoginController.php from Admin
 Open config/auth.php

 	Make authentication guard
 		'admin' => [
            'driver' => 'session',
            'provider' => 'admins',
        ],
    Make provider
    	'admins' => [
            'driver' => 'eloquent',
            'model' => App\Model\Admin\Admin::class, //Model path
        ],
    Make password reset table
    	'admins' => [
            'provider' => 'admins',
            'table' => 'password_resets',
            'expire' => 60,
        ],
Open AuthenticatesUsers.php and copy guard function and paste
app/Http/Controllers/Admin/Auth/LoginController. In guard use 
parameter guard('admin'). And change $redirect variable

protected function guard()
    {
        return Auth::guard();
    }
protected $redirectTo = 'admin/home';

Middleware and Redirect for Admin Side #23
------------------------------------------
Open app/Http/Controllers/Admin/Auth/LoginController.
Change __construct() like below

public function __construct()
    {
        $this->middleware('guest:admin')->except('logout');
    }
Open middleware RedirectIfAuthenticated.php. Make new condition in handle 
method.
***********************************************************
public function handle($request, Closure $next, $guard = null)
    {
        switch ($guard) {
            case 'admin':
                if (Auth::guard($guard)->check()) {
                    return redirect('admin/home');
                }
            break;
            
            default:
                if (Auth::guard($guard)->check()) {
                    return redirect('/home');
                }
                break;
        }
        return $next($request);
    }
*************************************************************

Use logout route directly because we've no need to overwrite here.

To prohabit direct access admin's home put  
$this->middleware('auth:admin'); in every admin's controller except auth

Open app/Exceptions/Handler.php. In unauthenticated function give condition below if statement
***************************************
$guard = array_get($exception->guards(),0);

        switch ($guard) {
            case 'admin':
                return redirect()->guest(route('admin.login'));
                break;
            
            default:
                return redirect()->guest(route('login'));
                break;
        }
****************************************
Create Admin User Roles - CRUD #24
----------------------------------
